package persistance;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.HashMap;

import model.Grupos;
import model.Jogos;
import persistance.GenericDao;

public class JogosDao implements IJogosDao {
	
	private GenericDao gDao;
	
	public JogosDao(GenericDao gDao){
		this.gDao = gDao;
	}
	
	private void atualizaJogos() throws SQLException, ClassNotFoundException {
		Connection c = gDao.getConnection();
		String sql_query = "{CALL sp_checar_jogos}";
		CallableStatement cs = c.prepareCall(sql_query);
		cs.execute();
		cs.close();
		c.close();
	}
	
	public void sorteiaJogos() throws SQLException, ClassNotFoundException {
		Connection c = gDao.getConnection();
		List<int[]> jogos_marcados = new ArrayList<int[]>();
		List<LocalDate> datas_jogos = gerarDatas();
		int cont1 = 0, cont2 = 0;
		atualizaJogos();
		Random ale = new Random();
		String sql_query_insert = "INSERT INTO Jogos (codigoTimeA, codigoTimeB, data) VALUES(?,?,?)";
		PreparedStatement ps = c.prepareStatement(sql_query_insert);
		while(cont1 < 12) {
			int tamanho_grupos[] = new int [4];
			List<Integer> times_ja_selecionados = new ArrayList<Integer>();
			List<Integer> times = new ArrayList<Integer>();
			List<Grupos> grupos = new ArrayList<Grupos>();
			String sql_query = "SELECT Grupos.grupo, Grupos.codigoTime, Times.nomeTime FROM Grupos INNER JOIN Times ON Grupos.codigoTime = Times.codigoTime ORDER BY Grupos.codigoTime";
			PreparedStatement ps2 = c.prepareStatement(sql_query);
			ResultSet rs = ps2.executeQuery();
			while(rs.next()) {
				Grupos g = new Grupos();
				g.setGrupo(rs.getString("grupo"));
				g.setTimeCod(rs.getInt("codigoTime"));
				g.setTimeNome(rs.getString("nomeTime"));
				if(g.getGrupo().equals("A")) {
					tamanho_grupos[0] += 1;
				}
				if(g.getGrupo().equals("B")) {
					tamanho_grupos[1] += 1;
				}
				if(g.getGrupo().equals("C")) {
					tamanho_grupos[2] += 1;
				}
				if(g.getGrupo().equals("D")) {
					tamanho_grupos[3] += 1;
				}
				grupos.add(g);
			}
			times.add(1);
			times.add(2);
			times.add(3);
			times.add(4);
			times.add(5);
			times.add(6);
			times.add(7);
			times.add(8);
			times.add(9);
			times.add(10);
			times.add(11);
			times.add(12);
			times.add(13);
			times.add(14);
			times.add(15);
			times.add(16);
			while(cont2 < 8) {
				int times_jogo[] = new int[2];
				int times_jogo_inverso[] = new int[2];
				int indexA = ale.nextInt(times.size());
				int indexB = ale.nextInt(times.size());
				
				times_jogo[0] = times.get(indexA);
				times_jogo[1] = times.get(indexB);
				
				times_jogo_inverso[0] = times_jogo[1];
				times_jogo_inverso[1] = times_jogo[0];
				
				if(tamanho_grupos[0] > 1 && tamanho_grupos[1] > 1 && tamanho_grupos[2] > 1 && tamanho_grupos[3] > 1) {
					if(times_jogo[0] != times_jogo[1]) {
						if(!(grupos.get(indexA).getGrupo().equals(grupos.get(indexB).getGrupo()))) {
							if(jogos_marcados.contains(times_jogo) == false && jogos_marcados.contains(times_jogo_inverso) == false) {
								if(times_ja_selecionados.contains(times_jogo[0]) == false && times_ja_selecionados.contains(times_jogo[1]) == false) {
									ps.setInt(1, times_jogo[0]);
									ps.setInt(2, times_jogo[1]);
									ps.setDate(3, Date.valueOf(datas_jogos.get(cont1)));
									ps.addBatch();
									if(grupos.get(indexA).getGrupo().equals("A") || grupos.get(indexB).getGrupo().equals("A")) {
										tamanho_grupos[0] -= 1;
									}
									if(grupos.get(indexA).getGrupo().equals("B") || grupos.get(indexB).getGrupo().equals("B")) {
										tamanho_grupos[1] -= 1;
									}
									if(grupos.get(indexA).getGrupo().equals("C") || grupos.get(indexB).getGrupo().equals("C")) {
										tamanho_grupos[2] -= 1;
									}
									if(grupos.get(indexA).getGrupo().equals("D") || grupos.get(indexB).getGrupo().equals("D")) {
										tamanho_grupos[3] -= 1;
									}
									times_ja_selecionados.add(times_jogo[0]);
									times_ja_selecionados.add(times_jogo[1]);
									times.remove(indexA);
									times.remove(indexB);
									grupos.remove(indexA);
									grupos.remove(indexB);
									jogos_marcados.add(times_jogo);
									cont2++;
								}
							}
						}
					}
				}
				else if(tamanho_grupos[0] == 1 && tamanho_grupos[1] == 1 && tamanho_grupos[2] == 1 && tamanho_grupos[3] == 1){
					
				}
			}
			cont2 = 0;
			cont1++;
			ps.executeBatch();
			ps.clearBatch();
		}
	}
	private List<LocalDate> gerarDatas() throws SQLException, ClassNotFoundException{
		LocalDate data_atual = LocalDate.now();
		LocalDate data_seguinte = LocalDate.now();
		DayOfWeek semana = data_atual.getDayOfWeek();
		List<LocalDate> datas_jogos = new ArrayList<LocalDate>();
		if(semana.getValue() > 3 && semana.getValue() < 7) {
			data_seguinte = data_atual.plusDays((7 - semana.getValue()));
		}
		else if(semana.getValue() < 3) {
			data_seguinte = data_atual.plusDays((3 - semana.getValue()));
		}
		while(datas_jogos.size() < 16) {
			if(semana.getValue() == 3) {
				datas_jogos.add(data_seguinte);
				data_seguinte = data_atual.plusDays(4);
			}
			else if(semana.getValue() == 7) {
				datas_jogos.add(data_seguinte);
				data_seguinte = data_atual.plusDays(3);
			}
			data_atual = data_seguinte;
			semana = data_atual.getDayOfWeek();
		}
		return datas_jogos;	
	}
	/*private void sorteiaTimes(List<int[]> combinations, int data[], int start, int end, int index) throws SQLException, ClassNotFoundException{
		 if (index == data.length) {1
	        int[] combination = data.clone();
	        combinations.add(combination);
	    } else if (start <= end) {
	        data[index] = start;
	        sorteiaTimes(combinations, data, start + 1, end, index + 1);
	        sorteiaTimes(combinations, data, start + 1, end, index);
	    }
	}
	private List<int[]> gerarJogos(int n, int r) throws ClassNotFoundException, SQLException {
	    List<int[]> combinations = new ArrayList<>();
	    sorteiaTimes(combinations, new int[r], 1, n, 0);
	    return combinations;
	}*/
	
	public List<Jogos> getJogos() throws SQLException, ClassNotFoundException {
		Connection c = gDao.getConnection();
		
		List<Jogos> jogos = new ArrayList<Jogos>();
		String sql_query = ("SELECT t.nomeTime AS timeA, (SELECT nomeTime FROM Times WHERE j1.codigoTimeB = codigoTime) AS timeB, j1.data "
				+ "FROM Times t INNER JOIN Jogos j1 ON j1.codigoTimeA = t.codigoTime");
		PreparedStatement ps = c.prepareStatement(sql_query.toString());
		ResultSet rs = ps.executeQuery();
		while(rs.next()) {
			Jogos j = new Jogos();
			j.setTimeA(rs.getString("timeA"));
			j.setTimeB(rs.getString("timeB"));
			j.setData(rs.getDate("data").toLocalDate());
			jogos.add(j);
		}
		rs.close();
		ps.close();
		c.close();
		return jogos;
	}

	public List<Jogos> getRodadas(Jogos j) throws SQLException, ClassNotFoundException {
Connection c = gDao.getConnection();
		
		List<Jogos> jogos = new ArrayList<Jogos>();
		String sql_query = ("SELECT t.nomeTime AS timeA, (SELECT nomeTime FROM Times WHERE j1.codigoTimeB = codigoTime) AS timeB, j1.data "
				+ "FROM Times t INNER JOIN Jogos j1 ON j1.codigoTimeA = t.codigoTime WHERE j1.data = ?");
		PreparedStatement ps = c.prepareStatement(sql_query.toString());
		ps.setDate(1, Date.valueOf(j.getData()));
		ResultSet rs = ps.executeQuery();
		while(rs.next()) {
			Jogos jogo = new Jogos();
			jogo.setTimeA(rs.getString("timeA"));
			jogo.setTimeB(rs.getString("timeB"));
			jogo.setData(rs.getDate("data").toLocalDate());
			jogos.add(jogo);
		}
		rs.close();
		ps.close();
		c.close();
		return jogos;
	}

	public List<Jogos> getDatas() throws SQLException, ClassNotFoundException {
		Connection c = gDao.getConnection();		
		List<Jogos> jogos = new ArrayList<Jogos>();
		String sql_query = ("SELECT DISTINCT data FROM Jogos");
		PreparedStatement ps = c.prepareStatement(sql_query.toString());
		ResultSet rs = ps.executeQuery();
		while(rs.next()) {
			Jogos j = new Jogos();
			j.setData(rs.getDate("data").toLocalDate());
			jogos.add(j);
		}
		rs.close();
		ps.close();
		c.close();
		return jogos;
	}
}
